// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/config": {
            "get": {
                "description": "show service config data when the service environment set to debug mode",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "get config data on the debug mode",
                "operationId": "get_config",
                "responses": {
                    "200": {
                        "description": "Response data",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/config.Config"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "description": "this returns \"pong\" messsage to show service is working",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "returns \"pong\" message",
                "operationId": "ping",
                "responses": {
                    "200": {
                        "description": "Response data",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    }
                }
            }
        },
        "/v1/phone": {
            "get": {
                "description": "this returns phone message is exists",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "returns all phone from server",
                "responses": {
                    "200": {
                        "description": "Response data",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    }
                }
            }
        },
        "/v1/phone/{ID}": {
            "get": {
                "description": "this returns phone if exists",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "returns phone from server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID",
                        "name": "ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response data",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "config.Config": {
            "type": "object",
            "properties": {
                "analyticsGRPCPort": {
                    "type": "string"
                },
                "analyticsServiceHost": {
                    "type": "string"
                },
                "authGRPCPort": {
                    "type": "string"
                },
                "authServiceHost": {
                    "type": "string"
                },
                "corporateGRPCPort": {
                    "type": "string"
                },
                "corporateServiceHost": {
                    "type": "string"
                },
                "defaultLimit": {
                    "type": "string"
                },
                "defaultOffset": {
                    "type": "string"
                },
                "environment": {
                    "description": "debug, test, release",
                    "type": "string"
                },
                "httpport": {
                    "type": "string"
                },
                "httpscheme": {
                    "type": "string"
                },
                "minioAccessKeyID": {
                    "type": "string"
                },
                "minioEndpoint": {
                    "type": "string"
                },
                "minioSSL": {
                    "type": "boolean"
                },
                "minioSecretAccessKey": {
                    "type": "string"
                },
                "objectBuilderGRPCPort": {
                    "type": "string"
                },
                "objectBuilderServiceHost": {
                    "type": "string"
                },
                "posGRPCPort": {
                    "type": "string"
                },
                "posServiceHost": {
                    "type": "string"
                },
                "postgresDatabase": {
                    "type": "string"
                },
                "postgresHost": {
                    "type": "string"
                },
                "postgresMaxConnections": {
                    "type": "integer"
                },
                "postgresPassword": {
                    "type": "string"
                },
                "postgresPort": {
                    "type": "integer"
                },
                "postgresUser": {
                    "type": "string"
                },
                "serviceHost": {
                    "type": "string"
                },
                "serviceName": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "http.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "description": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "This is a api gateway",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
